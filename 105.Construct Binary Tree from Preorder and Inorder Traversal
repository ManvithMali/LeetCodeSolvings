/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public TreeNode buildTree(int[] preorder, int[] inorder) {
        return findRoot( 0,0, inorder.length , preorder, inorder);
    }
    
    public TreeNode findRoot (int prestart , int instart , int inend, int[] preorder, int[] inorder){
        if (instart > inend || prestart > preorder.length-1 || instart > inorder.length || inend > inorder.length)
            return null;
        
        TreeNode root = new TreeNode(preorder[prestart]);
        
        int index =0;
        for (int i =0; i < inorder.length ; i++){
            if (preorder[prestart] == inorder[i]){
                index = i;
            }
        }
        
        root.left = findRoot(prestart+1, instart, index-1, preorder, inorder);                     
        root.right = findRoot(prestart+index-instart+1, index+1, inend, preorder, inorder);
    
        return root;
    } 
    
    
}
