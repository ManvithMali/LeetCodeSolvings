class Solution {
    public boolean sequenceReconstruction(int[] org, List<List<Integer>> seqs) {
        
        if (seqs== null || seqs.size()==0)
            return false;
        
        Map <Integer, HashSet<Integer>> hm = new HashMap <>();
        int[] seqOrder = new int[org.length+1];
        
        for (List seq : seqs){
            
            for (int i =1 ; i < seq.size(); i++){
                
                int num1 = Integer.parseInt(seq.get(i).toString());
                int num2 = Integer.parseInt(seq.get(i-1).toString());
                
                hm.putIfAbsent(num1,new HashSet<>());
                hm.get(num1).add(num2);                
                seqOrder[num1]=1;
            }                        
        }
        
        if(seqOrder[org[0]] != 0)
            return false;
        
        int index =1;
        int prev = org[0];
        
        
        
        while (index < org.length && hm.containsKey(org[index])){            
            if(!hm.get(org[index]).contains(prev)){
                return false;
            }
            hm.remove(org[index]);            
            prev =org[index];
            index++;
        }
        
        return (index) == org.length ;
    }
}
