class Solution {
    public double findMedianSortedArrays(int[] nums1, int[] nums2) {
        
        
        if (nums1.length > nums2.length){
          return findMedianSortedArrays(nums2,nums1);
        }
       
        int start =0;
        int end = nums1.length;        
        while (start <=end){            
            int partX = (start+end)/2;            
            int partY = ((nums1.length + nums2.length +1 )/2) - partX;
            
            
            
            int maxLeftX = partX == 0 ? Integer.MIN_VALUE : nums1[partX-1];
            int minRightX = partX == nums1.length ? Integer.MAX_VALUE : nums1[partX];
            
            int maxLeftY = partY == 0 ? Integer.MIN_VALUE : nums2[partY-1];
            int minRightY = partY == nums2.length ? Integer.MAX_VALUE : nums2[partY];                        
            
            if (maxLeftX <= minRightY &&  maxLeftY <= minRightX)
            {
                if ((nums1.length + nums2.length)%2 == 0){
                    return (double)((Math.max(maxLeftX,maxLeftY)+Math.min(minRightX,minRightY))/2.0);
                }else{
                    return (double)(Math.max(maxLeftX,maxLeftY));
                }            
            }
            else if (maxLeftX > minRightY){
                end =partX-1;
            }else
            {
                start = partX+1;
            }            
            
        }        
        return -1;
    }
    
}
